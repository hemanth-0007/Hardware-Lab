
; Assignmnet -3 
; Posimsetti Hemanth Venkata Sai
; B210500CS
; CS03 


1.


section .data
 msg1    : db "enter the number of elements in the array :"
 l1      : equ $-msg1
 msg2    : db "enter the digits :",10
 l2      : equ $-msg2
 msg3    : db "no. of even numbers :"
 l3      : equ $-msg3
 msg4    : db "no.of odd numbers :"
 l4      : equ $-msg4
 msg5    : db "check",10
 l5      : equ $-msg5
 newline : db 10

section .bss
  n    : resd 1
  num1 : resw 1
  num2 : resw 1
  temp : resb 1
  num  : resw 1
  nod  : resb 1
  count: resb 1
  array : resw 50

section .text
global _start:
_start:

 mov eax , 4
 mov ebx , 1
 mov ecx , msg1
 mov edx , l1
 int 80h

 call read_num

 mov ax , word[num]
 mov word[n] , ax


 mov eax , 4
 mov ebx , 1
 mov ecx , msg2
 mov edx , l2
 int 80h


call read_array

call even_count

mov ax , word[num1]
mov word[num] , ax

mov eax ,4
mov ebx , 1
mov ecx , msg3
mov edx , l3
int 80h

call print_num

mov ax , word[num1]
mov bx , word[n]
sub bx , ax

mov word[num], bx

mov eax ,4
mov ebx , 1
mov ecx , msg4
mov edx , l4
int 80h

call print_num

call exit

; this function counts the number of even numbers :::

even_count :
   pusha

   mov edx , 0
   mov ebx , array
   mov word[num1], 0

cmp_loop :

   cmp edx , dword[n]
   je end_cmp
   mov ax , word[ebx + 2*edx ]
   mov cl , 2
   div cl
   cmp ah , 1
   je iterate
   inc word[num1]

iterate :

  inc edx
  jmp cmp_loop

end_cmp :

  popa
  ret


; required functions for reading array and printing multi digit :;;

read_array:
    pusha

    mov ebx,array
    mov eax,0

read_loop:
    cmp eax,dword[n]
    je end_read
    call read_num

    mov cx,word[num]
    mov word[ebx+2*eax],cx
    inc eax

    jmp read_loop


read_num:
    pusha
    mov word[num], 0

loop_read:
    mov eax, 3
    mov ebx, 0
    mov ecx, temp
    mov edx, 1
    int 80h

    cmp byte[temp], 10
    je end_read

    mov ax, word[num]
    mov bx, 10
    mul bx
    mov bl, byte[temp]
    sub bl, 30h
    mov bh, 0
    add ax, bx
    mov word[num], ax

    jmp loop_read

end_read:
    popa
    ret

print_num:

      mov byte[count],0
      pusha

      extract_no:

      cmp word[num], 0
      je print_no
      inc byte[count]
      mov dx, 0
      mov ax, word[num]
      mov bx, 10
      div bx
      push dx
      mov word[num], ax
      jmp extract_no

print_no:

      cmp byte[count], 0
      je end_print
      dec byte[count]
      pop dx
      mov byte[temp], dl
      add byte[temp], 30h
      mov eax, 4
      mov ebx, 1
      mov ecx, temp
      mov edx, 1
      int 80h
      jmp print_no

end_print:

      mov eax,4
      mov ebx,1
      mov ecx,newline
      mov edx,1
      int 80h

      popa
      ret

exit :

     mov eax , 1
     mov ebx , 0
     int 80h





6.


section .bss
	num: resw 1 
	nod: resb 1 
	temp: resb 2
	matrix1: resw 200
	matrix2: resw 200
	m: resw 1
	n: resw 1
	i: resw 1
	j: resw 1

section .data
	msg1: db "Enter the number of rows in the matrix : "
	msg_size1: equ $-msg1
	msg2: db "Enter the elements one by one(row by row) : "
	msg_size2: equ $-msg2
	msg3: db "Enter the number of columns in the matrix : "
	msg_size3: equ $-msg3
	tab: db 9 
	new_line: db 10 

section .text
	global _start
	_start:

		mov eax, 4
		mov ebx, 1
		mov ecx, msg1
		mov edx, msg_size1
		int 80h

		mov ecx, 0

		call read_num
		mov cx, word[num]
		mov word[m], cx

		mov eax, 4
		mov ebx, 1
		mov ecx, msg3
		mov edx, msg_size3
		int 80h
		mov ecx, 0

		call read_num


		mov cx, word[num]
		mov word[n], cx

		mov eax, 4
		mov ebx, 1
		mov ecx, msg2
		mov edx, msg_size2
		int 80h

		mov eax, 0
		mov ebx, matrix1
		mov word[i], 0
		mov word[j], 0
		i_loop:
			mov word[j], 0
			j_loop:
				call read_num
				mov dx , word[num]
				mov word[ebx + 2 * eax], dx
				inc eax
				inc word[j]
				mov cx, word[j]
				cmp cx, word[n]
				jb j_loop
				inc word[i]
				mov cx, word[i]
				cmp cx, word[m]
				jb i_loop
		
		mov eax, 4
		mov ebx, 1
		mov ecx, msg2
		mov edx, msg_size2
		int 80h
		mov eax, 0
		mov ebx, matrix2
		mov word[i], 0
		mov word[j], 0
		i_loop_3:
			mov word[j], 0
			j_loop_3:
				call read_num
				mov dx , word[num]
				mov word[ebx + 2 * eax], dx
				inc eax
				inc word[j]
				mov cx, word[j]
				cmp cx, word[n]
				jb j_loop_3
				inc word[i]
				mov cx, word[i]
				cmp cx, word[m]
				jb i_loop_3
		mov eax, 0
		mov ebx, matrix1
		mov ecx, matrix2
		mov word[i], 0
		mov word[j], 0
		i_loop_4:
			mov word[j], 0
			j_loop_4:
				mov dx, word[ebx + 2 * eax]
				add word[ecx + 2 * eax], dx
				
				inc eax
				inc word[j]
				mov dx, word[j]
				cmp dx, word[n]
				jb j_loop_4
				inc word[i]
				mov dx, word[i]
				cmp dx, word[m]
				jb i_loop_4

		mov eax, 0
		mov ebx, matrix2
		mov word[i], 0
		mov word[j], 0
		i_loop2:
			mov word[j], 0

			j_loop2:

				mov dx, word[ebx + 2 * eax]
				
				mov word[num] , dx

				call print_num


				pusha

				mov eax, 4
				mov ebx, 1
				mov ecx, tab
				mov edx, 1
				int 80h

				popa

			inc eax
			inc word[j]
			mov cx, word[j]
			cmp cx, word[n]
			jb j_loop2

			pusha

			mov eax, 4
			mov ebx, 1
			mov ecx, new_line
			mov edx, 1
			int 80h

			popa

			inc word[i]
			mov cx, word[i]
			cmp cx, word[m]
			jb i_loop2

		exit:
		mov eax, 1
		mov ebx, 0
		int 80h

read_num:
	pusha
	mov word[num], 0
	loop_read:
		mov eax, 3
		mov ebx, 0
		mov ecx, temp
		mov edx, 1
		int 80h

		cmp byte[temp], 10
		je end_read

		mov ax, word[num]
		mov bx, 10
		mul bx
		mov bl, byte[temp]
		sub bl, 30h
		mov bh, 0
		add ax, bx
		mov word[num], ax
		jmp loop_read

	end_read:
		popa
		ret

print_num:
	pusha
		extract_no:
		cmp word[num], 0
		je print_no

		inc byte[nod]
		mov dx, 0
		mov ax, word[num]
		mov bx, 10
		div bx
		push dx
		mov word[num], ax
		jmp extract_no

	print_no:
		cmp byte[nod], 0
		je end_print
		dec byte[nod]
		pop dx
		mov byte[temp], dl
		add byte[temp], 30h

		mov eax, 4
		mov ebx, 1
		mov ecx, temp
		mov edx, 1
		int 80h

		jmp print_no

	end_print:
		popa
		ret









7.


section .data

   msg1 : db "input the string :"
   l1   : equ $-msg1
   msg2 : db "Yes",10
   l2   : equ $-msg2
   msg3 : db "No",10
   l3   : equ $-msg3
   newline : db 10

;__________________________________________________________________

section .bss

  string : resb 50
  temp   : resb 1
  len    : resb 1
;__________________________________________________________________

section .text
global _start:
_start:

  mov eax , 4
  mov ebx , 1
  mov ecx , msg1
  mov edx , l1
  int 80h

  call read_string
  call length
  call check
  call exit

;______________________________________________________________________

; check function

check :
  pusha
  mov ebx ,string
  mov ecx ,dword[len]
  mov edx , 0

  cmp edx , ecx
  je yes

  dec ecx

  check_loop :
      cmp edx , ecx
      jae yes
      mov al , byte[ebx +edx]
      mov ah , byte[ebx +ecx]
      cmp al , ah
      jne no
      inc edx
      dec ecx
      jmp check_loop
  yes :

     mov eax , 4
     mov ebx , 1
     mov ecx , msg2
     mov edx , l2
     int 80h
     popa
     ret

  no :
    mov eax , 4
    mov ebx , 1
    mov ecx , msg3
    mov edx , l3
    int 80h
    popa
    ret

;__________________________________________________________________

 ;length of the string :::

  length :
     pusha
     mov ebx,string
     mov dword[len],0
 length_loop:
    cmp byte[ebx],0
    je end_length
    inc dword[len]
    inc ebx
    jmp length_loop

 end_length:
    popa
    ret

;__________________________________________________________________
; reading the string

  read_string:
	   pusha
	   mov ebx,string
	reading:
		 push ebx
		 mov eax,3
		 mov ebx,0
		 mov ecx,temp
	   mov edx,1
		 int 80h
	 	 pop ebx

		cmp byte[temp],10
		je end_read

		mov al,byte[temp]
		mov byte[ebx],al
		inc ebx
		jmp reading

	end_read:
		mov byte[ebx],0
		popa
		ret
;__________________________________________________________________

  exit :

     mov eax , 1
     mov ebx , 0
     int 80h





; Basic commands to run the code 
; nasm -f elf 1.asm ; ld -melf_i386 1.o -o he  ; ./he 